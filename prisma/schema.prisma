generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Enums
enum ElectionType {
  LOCAL
  STATE
  NATIONAL
  UNIVERSITY
}

enum VendorTier {
  FREE
  STANDARD
  PREMIUM
}

// Models
model Election {
  id          Int          @id @default(autoincrement())
  position    String
  date        DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  active      Boolean
  city        String
  description String
  positions   Int
  state       String
  type        ElectionType
  candidates  Candidate[]
}

model Candidate {
  name            String
  party           String
  policies        String[]
  website         String?
  electionId      Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  additionalNotes String?
  city            String?
  linkedin        String?
  photo           String?
  position        String
  sources         String[]
  state           String?
  verified        Boolean  @default(false)
  donations       String[]
  bio             String   @default("")
  clerkUserId     String?  @unique
  history         String[]
  id              Int      @id @default(autoincrement()) @map("id")

  // Relations
  election    Election      @relation(fields: [electionId], references: [id])
  Vendors     Vendor[]
  Testimonial Testimonial[]
}

model UserValidationRequest {
  id             Int      @id @default(autoincrement())
  fullName       String
  email          String
  phone          String
  position       String
  website        String?
  linkedin       String?
  twitter        String?
  additionalInfo String?
  city           String
  state          String
  candidateId    Int
  clerkUserId    String   @unique
  electionId     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ElectionSubmission {
  id          Int              @id @default(autoincrement())
  position    String
  date        DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  city        String
  state       String
  description String
  positions   Int
  type        ElectionType
  status      SubmissionStatus @default(PENDING)
  clerkUserId String?
  notes       String?
}

model CandidateSubmission {
  id              Int              @id @default(autoincrement())
  name            String
  party           String
  policies        String[]
  website         String?
  electionId      Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  additionalNotes String?
  city            String
  linkedin        String?
  photo           String?
  position        String
  state           String
  bio             String
  clerkUserId     String?
  status          SubmissionStatus @default(PENDING)
  notes           String?
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

model Vendor {
  id           Int        @id @default(autoincrement())
  name         String
  bio          String
  website      String?
  email        String
  phone        String?
  city         String
  state        String
  verified     Boolean    @default(false)
  subscription VendorTier @default(FREE)
  clerkUserId  String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  portfolio       PortfolioItem[] // optional media
  testimonials    Testimonial[]
  candidate       Candidate[] // campaigns they've worked with
  ServiceCategory ServiceCategory[] @relation("VendorServices")
}

model ServiceCategory {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  vendors Vendor[] @relation("VendorServices")
}

model PortfolioItem {
  id          Int     @id @default(autoincrement())
  vendor      Vendor  @relation(fields: [vendorId], references: [id])
  vendorId    Int
  title       String
  imageUrl    String
  description String?
}

model Testimonial {
  id          Int       @id @default(autoincrement())
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  vendorId    Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  content     String
  rating      Int // e.g. 1â€“5 stars
  createdAt   DateTime  @default(now())
}
