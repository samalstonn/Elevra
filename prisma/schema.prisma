generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Represents the overall election event, e.g., "Dryden Village Election 2025"
model Election {
  id   Int          @id @default(autoincrement())
  name String       @default("")
  date DateTime
  type ElectionType

  city        String
  state       String
  description String?

  // Timestamps & flags
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)
  hidden    Boolean  @default(false)

  // Relations
  offices Office[]
}

// Represents a specific office being contested within an Election, e.g., "Mayor", "School Board"
model Office {
  id          Int     @id @default(autoincrement())
  position    String
  description String?
  positions   Int

  city  String
  state String

  // Election linkage
  electionId Int
  election   Election @relation(fields: [electionId], references: [id])

  // Timestamps & flags
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hidden    Boolean  @default(false)

  // Candidates â€” keep your existing model unchanged
  candidates Candidate[]
}

model Candidate {
  name            String
  party           String
  policies        String[]
  website         String?
  officeId        Int? // Changed from electionId
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  additionalNotes String?
  city            String?
  linkedin        String?
  photo           String?
  position        String
  sources         String[]
  state           String?
  bio             String                 @default("")
  clerkUserId     String?                @unique
  history         String[]
  id              Int                    @id @default(autoincrement())
  status          SubmissionStatus       @default(PENDING)
  verified        Boolean                @default(false)
  photoUrl        String?
  hidden          Boolean                @default(false)
  slug            String                 @unique
  donationCount   Int                    @default(0)
  email           String?
  phone           String?
  votinglink      String?
  office          Office?                @relation(fields: [officeId], references: [id])
  profileViews    CandidateProfileView[]
  donations       Donation[]
  endorsements    Endorsement[]
  Testimonial     Testimonial[]
  Vendors         Vendor[]               @relation("CandidateToVendor")
}

model Donation {
  id                    Int              @id @default(autoincrement())
  amount                Decimal          @db.Decimal(10, 2)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  donorName             String
  donorEmail            String
  donorAddress          String
  donorCity             String
  donorState            String
  donorZip              String
  donorPhone            String?
  isRetiredOrUnemployed Boolean          @default(false)
  occupation            String?
  employer              String?
  transactionId         String?          @unique
  processingFee         Decimal?         @db.Decimal(10, 2)
  coverFee              Boolean          @default(false)
  candidateId           Int
  clerkUserId           String?
  paidAt                DateTime?
  status                SubmissionStatus @default(PENDING)
  candidate             Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model UserValidationRequest {
  id             Int              @id @default(autoincrement())
  fullName       String
  email          String
  phone          String?
  position       String
  website        String?
  linkedin       String?
  twitter        String?
  additionalInfo String?
  city           String? // City/State might be redundant if linked via Office -> Election
  state          String? // City/State might be redundant if linked via Office -> Election
  candidateId    Int
  clerkUserId    String           @unique
  officeId       Int              @default(1) // Changed from electionId
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  status         SubmissionStatus @default(PENDING)
}

// Renamed from ElectionSubmission
model OfficeSubmission {
  id          Int              @id @default(autoincrement())
  position    String // Office position
  description String?
  positions   Int // Number of seats
  electionId  Int // Link to the parent Election
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  status      SubmissionStatus @default(PENDING)
  clerkUserId String?
  notes       String?
  // Removed date, city, state, type as they belong to the Election
}

model CandidateSubmission {
  id              Int              @id @default(autoincrement())
  name            String
  party           String
  policies        String[]
  website         String?
  officeId        Int? // Changed from electionId
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  additionalNotes String?
  city            String
  linkedin        String?
  photo           String?
  position        String
  state           String
  bio             String
  clerkUserId     String?
  status          SubmissionStatus @default(PENDING)
  notes           String?
}

model Vendor {
  id                Int               @id @default(autoincrement())
  name              String
  bio               String
  website           String?
  email             String
  phone             String?
  city              String
  state             String
  subscription      VendorTier        @default(FREE)
  clerkUserId       String            @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  status            SubmissionStatus  @default(PENDING)
  verified          Boolean           @default(false)
  latitude          Float?
  longitude         Float?
  photoUrl          String?
  slug              String            @unique
  hidden            Boolean           @default(false)
  portfolio         PortfolioItem[]
  testimonials      Testimonial[]
  candidate         Candidate[]       @relation("CandidateToVendor")
  serviceCategories ServiceCategory[] @relation("VendorServices")
}

model ServiceCategory {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  type        ServiceCategoryType @unique
  description String?
  vendors     Vendor[]            @relation("VendorServices")
}

model PortfolioItem {
  id          Int     @id @default(autoincrement())
  vendorId    Int
  title       String
  imageUrl    String
  description String?
  vendor      Vendor  @relation(fields: [vendorId], references: [id])
}

model Testimonial {
  id          Int       @id @default(autoincrement())
  vendorId    Int
  candidateId Int
  content     String
  rating      Int
  createdAt   DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
}

model CandidateProfileView {
  id          Int       @id @default(autoincrement())
  candidateId Int
  viewedAt    DateTime  @default(now())
  viewerIp    String?
  userAgent   String?
  referrerUrl String?
  Candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Endorsement {
  id                      Int       @id @default(autoincrement())
  candidateId             Int
  endorserName            String
  relationshipDescription String?
  content                 String
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  clerkUserId             String
  hidden                  Boolean   @default(false)
  candidate               Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Photo {
  id         Int      @id @default(autoincrement())
  key        String   @unique
  url        String
  uploadedBy String // will store clerkUserId
  createdAt  DateTime @default(now())
}

enum ElectionType {
  LOCAL
  STATE
  NATIONAL
  UNIVERSITY
}

enum VendorTier {
  FREE
  STANDARD
  PREMIUM
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ServiceCategoryType {
  CREATIVE_BRANDING
  DIGITAL_TECH
  PHYSICAL_MEDIA
  CONSULTING_PR
  OTHER
}
