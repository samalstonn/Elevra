generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ElectionType {
  LOCAL
  STATE
  NATIONAL
  UNIVERSITY
}

enum VendorTier {
  FREE
  STANDARD
  PREMIUM
}

// Models
model Election {
  id          Int          @id @default(autoincrement()) 
  position    String
  date        DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  active      Boolean
  city        String
  description String
  positions   Int
  state       String
  type        ElectionType
  candidates  Candidate[]
}

model Candidate {
  id              Int      @id @default(autoincrement()) @map("id")
  name            String
  party           String   // Democrat (also on the 'Protecting Dryden' line)
  policies        String[]
  website         String?
  electionId      Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  additionalNotes String?
  city            String?
  linkedin        String?
  photo           String? 
  position        String   // eg. Incumbent Village Mayor (Dryden Village)
  sources         String[]
  state           String?
  twitter         String?  
  verified        Boolean  @default(false)
  donations       String[]
  bio             String   @default("")
  clerkUserId     String?  @unique
  history         String[]
  
  // Relations
  election        Election @relation(fields: [electionId], references: [id])
  Vendors          Vendor[]
  Testimonial     Testimonial[]
}

model UserValidationRequest {
  id             Int      @id @default(autoincrement())
  fullName       String
  email          String
  phone          String
  position       String
  website        String?
  linkedin       String?
  twitter        String?
  additionalInfo String?
  city           String
  state          String
  candidateId    Int
  clerkUserId    String   @unique
  electionId     Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Vendor { 
  id              Int             @id @default(autoincrement())
  name            String
  bio             String
  website         String?
  email           String
  phone           String?
  city            String
  state           String
  verified        Boolean         @default(false)
  subscription    VendorTier      @default(FREE)
  clerkUserId     String          @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  portfolio       PortfolioItem[]   // optional media
  testimonials    Testimonial[]
  candidate       Candidate[]        // campaigns they've worked with
  ServiceCategory ServiceCategory[] @relation("VendorServices")
}

model ServiceCategory { // eg. Digital, Mailing, Signage, etc.
  id        Int       @id @default(autoincrement())
  name      String    @unique
  vendors   Vendor[]  @relation("VendorServices")
}

model PortfolioItem { // eg. a video, a photo, a pdf, etc.
  id          Int      @id @default(autoincrement())
  vendor      Vendor   @relation(fields: [vendorId], references: [id])
  vendorId    Int
  title       String
  imageUrl    String
  description String?
}

model Testimonial { // eg. a testimonial from a candidate
  id          Int       @id @default(autoincrement())
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  vendorId    Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  candidateId Int
  content     String
  rating      Int       // e.g. 1â€“5 stars
  createdAt   DateTime  @default(now())
}