generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Election {
  id          Int            @id @default(autoincrement())
  position    String
  date        DateTime
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  active      Boolean
  city        String
  description String
  positions   Int
  state       String
  type        ElectionType
  hidden      Boolean        @default(false)
  uploadedBy  String         @default("team@elevracommunity.com")
  candidates  ElectionLink[]
}

model Candidate {
  name          String
  website       String?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  linkedin      String?
  photo         String?
  bio           String?                @default("")
  clerkUserId   String?                @unique
  history       String[]
  id            Int                    @id @default(autoincrement())
  status        SubmissionStatus       @default(PENDING)
  verified      Boolean                @default(false)
  photoUrl      String?
  hidden        Boolean                @default(false)
  slug          String                 @unique
  donationCount Int                    @default(0)
  email         String?
  phone         String?
  currentRole   String?
  currentState  String?
  currentCity   String?
  uploadedBy    String                 @default("team@elevracommunity.com")
  profileViews  CandidateProfileView[]
  donations     Donation[]
  elections     ElectionLink[]
  followers     Follow[]
  changeEvents  ChangeEvent[]
  endorsements  Endorsement[]
  Testimonial   Testimonial[]
  Vendors       Vendor[]               @relation("CandidateToVendor")
}

model Donation {
  id                    Int              @id @default(autoincrement())
  amount                Decimal          @db.Decimal(10, 2)
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  donorName             String
  donorEmail            String
  donorAddress          String
  donorCity             String
  donorState            String
  donorZip              String
  donorPhone            String?
  isRetiredOrUnemployed Boolean          @default(false)
  occupation            String?
  employer              String?
  transactionId         String?          @unique
  processingFee         Decimal?         @db.Decimal(10, 2)
  coverFee              Boolean          @default(false)
  candidateId           Int
  clerkUserId           String?
  paidAt                DateTime?
  status                SubmissionStatus @default(PENDING)
  candidate             Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model UserValidationRequest {
  id             Int              @id @default(autoincrement())
  fullName       String
  email          String
  phone          String?
  position       String
  website        String?
  linkedin       String?
  twitter        String?
  additionalInfo String?
  city           String?
  state          String?
  candidateId    Int
  clerkUserId    String           @unique
  electionId     Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  status         SubmissionStatus @default(PENDING)
}

model ElectionSubmission {
  id          Int              @id @default(autoincrement())
  position    String
  date        DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  city        String
  state       String
  description String
  positions   Int
  type        ElectionType
  status      SubmissionStatus @default(PENDING)
  clerkUserId String?
  notes       String?
}

model CandidateSubmission {
  id              Int              @id @default(autoincrement())
  name            String
  party           String
  policies        String[]
  website         String?
  electionId      Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  additionalNotes String?
  city            String
  linkedin        String?
  photo           String?
  position        String
  state           String
  bio             String
  clerkUserId     String?
  status          SubmissionStatus @default(PENDING)
  notes           String?
}

model Vendor {
  id                Int               @id @default(autoincrement())
  name              String
  bio               String
  website           String?
  email             String
  phone             String?
  city              String
  state             String
  subscription      VendorTier        @default(FREE)
  clerkUserId       String            @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  status            SubmissionStatus  @default(PENDING)
  verified          Boolean           @default(false)
  latitude          Float?
  longitude         Float?
  photoUrl          String?
  slug              String            @unique
  hidden            Boolean           @default(false)
  portfolio         PortfolioItem[]
  testimonials      Testimonial[]
  candidate         Candidate[]       @relation("CandidateToVendor")
  serviceCategories ServiceCategory[] @relation("VendorServices")
}

model ServiceCategory {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  type        ServiceCategoryType @unique
  description String?
  vendors     Vendor[]            @relation("VendorServices")
}

model PortfolioItem {
  id          Int     @id @default(autoincrement())
  vendorId    Int
  title       String
  imageUrl    String
  description String?
  vendor      Vendor  @relation(fields: [vendorId], references: [id])
}

model Testimonial {
  id          Int       @id @default(autoincrement())
  vendorId    Int
  candidateId Int
  content     String
  rating      Int
  createdAt   DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
}

model CandidateProfileView {
  id          Int       @id @default(autoincrement())
  candidateId Int
  viewedAt    DateTime  @default(now())
  viewerIp    String?
  userAgent   String?
  referrerUrl String?
  Candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Voter {
  id            Int               @id @default(autoincrement())
  clerkUserId   String            @unique
  email         String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  follows       Follow[]
  notifications Notification[]
  preferences   VoterPreference?
}

model Follow {
  voterId     Int
  candidateId Int
  createdAt   DateTime @default(now())
  voter       Voter    @relation(fields: [voterId], references: [id], onDelete: Cascade)
  candidate   Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@id([voterId, candidateId])
}

model ChangeEvent {
  id          Int              @id @default(autoincrement())
  candidateId Int
  type        ChangeEventType
  metadata    Json?
  createdAt   DateTime         @default(now())
  candidate   Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  notifications Notification[]
}

model Notification {
  id            Int                 @id @default(autoincrement())
  voterId       Int
  changeEventId Int
  type          NotificationType
  status        NotificationStatus  @default(UNREAD)
  payload       Json?
  createdAt     DateTime            @default(now())
  readAt        DateTime?
  voter         Voter               @relation(fields: [voterId], references: [id], onDelete: Cascade)
  changeEvent   ChangeEvent         @relation(fields: [changeEventId], references: [id], onDelete: Cascade)
}

model VoterPreference {
  id              Int        @id @default(autoincrement())
  voterId         Int        @unique
  emailMode       EmailMode  @default(IMMEDIATE)
  notifyBio       Boolean    @default(true)
  notifyEducation Boolean    @default(true)
  notifyPhoto     Boolean    @default(true)
  notifyCampaign  Boolean    @default(true)
  dailyDigestHour Int?
  lastDigestSentAt DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  voter           Voter      @relation(fields: [voterId], references: [id], onDelete: Cascade)
}

model Endorsement {
  id                      Int       @id @default(autoincrement())
  candidateId             Int
  endorserName            String
  relationshipDescription String?
  content                 String
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  clerkUserId             String
  hidden                  Boolean   @default(false)
  candidate               Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
}

model Photo {
  id         Int      @id @default(autoincrement())
  key        String   @unique
  url        String
  uploadedBy String
  createdAt  DateTime @default(now())
}

model BlogPost {
  id          Int        @id @default(autoincrement())
  title       String
  slug        String     @unique
  authorName  String
  excerpt     String?
  coverImage  String?
  contentMd   String
  tags        String[]   @default([])
  status      BlogStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ElectionLink {
  candidateId     Int
  electionId      Int
  joinedAt        DateTime       @default(now())
  additionalNotes String?
  party           String
  photoUrl        String?
  policies        String[]       @default([])
  sources         String[]       @default([])
  votinglink      String?
  ContentBlock    ContentBlock[]
  Document        Document?
  candidate       Candidate      @relation(fields: [candidateId], references: [id])
  election        Election       @relation(fields: [electionId], references: [id])

  @@id([candidateId, electionId])
}

model ContentBlock {
  id           Int          @id @default(autoincrement())
  candidateId  Int
  electionId   Int
  order        Int
  type         BlockType
  color        TextColor?
  level        Int?
  text         String?
  body         String?
  listStyle    ListStyle?
  items        String[]
  imageUrl     String?
  caption      String?
  videoUrl     String?
  thumbnailUrl String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  electionLink ElectionLink @relation(fields: [candidateId, electionId], references: [candidateId, electionId], onDelete: Cascade)

  @@unique([candidateId, electionId, order])
}

model SpreadsheetUpload {
  id                String                  @id @default(cuid())
  status            SpreadsheetUploadStatus @default(QUEUED)
  failureReason     String?
  originalFilename  String
  uploaderEmail     String
  summaryJson       Json?
  resultWorkbookUrl String?
  forceHidden       Boolean                 @default(true)
  queuedAt          DateTime                @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  jobs              GeminiJob[]             @relation("SpreadsheetUploadJobs")
  batches           UploadElectionBatch[]
  notifications     UploadNotificationLog[]

  @@index([status, queuedAt])
  @@index([createdAt])
}

model UploadElectionBatch {
  id             String            @id @default(cuid())
  uploadId       String
  groupKey       String?
  municipality   String?
  state          String?
  position       String?
  rawRows        Json
  analysisJson   Json?
  structuredJson Json?
  status         UploadBatchStatus @default(QUEUED)
  errorReason    String?
  analyzeJobId   String?
  structureJobId String?
  insertJobId    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  jobs           GeminiJob[]       @relation("BatchJobs")
  upload         SpreadsheetUpload @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@index([uploadId])
  @@index([status])
}

model GeminiJob {
  id                      String               @id @default(cuid())
  uploadId                String?
  batchId                 String?
  type                    GeminiJobType
  status                  GeminiJobStatus      @default(PENDING)
  priority                Int                  @default(0)
  dependencyJobId         String?
  preferredModels         Json
  fallbackModels          Json?
  nextRunAt               DateTime             @default(now())
  retryCount              Int                  @default(0)
  maxRetries              Int                  @default(5)
  lastError               String?
  startedAt               DateTime?
  completedAt             DateTime?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  estimatedRequestTokens  Int?
  estimatedResponseTokens Int?
  metadata                Json?
  batch                   UploadElectionBatch? @relation("BatchJobs", fields: [batchId], references: [id], onDelete: Cascade)
  upload                  SpreadsheetUpload?   @relation("SpreadsheetUploadJobs", fields: [uploadId], references: [id], onDelete: Cascade)
  attempts                GeminiJobAttempt[]

  @@index([status, nextRunAt])
  @@index([type, status])
  @@index([uploadId])
  @@index([batchId])
}

model GeminiJobAttempt {
  id              String                 @id @default(cuid())
  jobId           String
  modelUsed       String
  startedAt       DateTime               @default(now())
  completedAt     DateTime?
  requestTokens   Int?
  responseTokens  Int?
  batchTokens     Int?
  statusCode      Int?
  responseBody    Json?
  errorType       String?
  errorMessage    String?
  status          GeminiJobAttemptStatus @default(PENDING)
  createdAt       DateTime               @default(now())
  rateWindowStart DateTime?
  isFallback      Boolean?               @default(false)
  job             GeminiJob              @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
}

model GeminiRateWindow {
  id             String   @id @default(cuid())
  model          String
  windowStart    DateTime
  requestCount   Int      @default(0)
  requestTokens  Int      @default(0)
  responseTokens Int      @default(0)
  batchTokens    Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([model, windowStart])
}

model UploadNotificationLog {
  id         String                   @id @default(cuid())
  uploadId   String
  email      String
  type       UploadNotificationType
  status     UploadNotificationStatus @default(QUEUED)
  responseId String?
  error      String?
  metadata   Json?
  sentAt     DateTime?
  createdAt  DateTime                 @default(now())
  updatedAt  DateTime                 @updatedAt
  upload     SpreadsheetUpload        @relation(fields: [uploadId], references: [id], onDelete: Cascade)

  @@index([uploadId])
  @@index([type])
}

model Document {
  id            String       @id @default(cuid())
  contentJson   Json
  contentHtml   String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  candidateSlug String
  clerkUserId   String
  candidateId   Int
  electionId    Int
  electionLink  ElectionLink @relation(fields: [candidateId, electionId], references: [candidateId, electionId], onDelete: Cascade)

  @@unique([candidateId, electionId])
}

model EmailDocument {
  id              String   @id @default(cuid())
  key             String   @unique
  title           String
  subjectTemplate String
  htmlTemplate    String
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model EmailUnsubscribe {
  id        Int      @id @default(autoincrement())
  email     String
  scope     String
  reason    String?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  @@index([email], map: "EmailUnsubscribe_email_idx")
  @@unique([email, scope], map: "EmailUnsubscribe_email_scope_key")
}

enum ElectionType {
  LOCAL
  STATE
  NATIONAL
  UNIVERSITY
  TEST
}

enum VendorTier {
  FREE
  STANDARD
  PREMIUM
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ServiceCategoryType {
  CREATIVE_BRANDING
  DIGITAL_TECH
  PHYSICAL_MEDIA
  CONSULTING_PR
  OTHER
}

enum BlogStatus {
  DRAFT
  PUBLISHED
}

enum BlockType {
  HEADING
  TEXT
  LIST
  DIVIDER
  IMAGE
  VIDEO
}

enum ListStyle {
  BULLET
  NUMBER
}

enum TextColor {
  BLACK
  GRAY
  PURPLE
}

enum SpreadsheetUploadStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
  NEEDS_REUPLOAD
  CANCELLED
}

enum UploadBatchStatus {
  QUEUED
  ANALYZING
  STRUCTURING
  INSERTING
  COMPLETED
  FAILED
  NEEDS_REUPLOAD
  SKIPPED
}

enum GeminiJobType {
  ANALYZE
  STRUCTURE
  INSERT
  WORKBOOK
  NOTIFICATION
}

enum GeminiJobStatus {
  PENDING
  READY
  IN_PROGRESS
  SUCCEEDED
  FAILED
  CANCELLED
  SKIPPED
}

enum GeminiJobAttemptStatus {
  PENDING
  IN_PROGRESS
  SUCCEEDED
  FAILED
  CANCELLED
}

enum UploadNotificationType {
  QUEUED
  ANALYZE_COMPLETE
  STRUCTURE_COMPLETE
  INSERT_COMPLETE
  FINAL
  BATCH_FAILURE
}

enum UploadNotificationStatus {
  QUEUED
  SENT
  FAILED
  SKIPPED
}
