generator client {
  provider = "prisma-client-js"
  output   = "./node_modules/@prisma/client"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Election {
  id          Int          @id @default(autoincrement())
  position    String
  date        DateTime
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  active      Boolean
  city        String
  description String
  positions   Int
  state       String
  type        ElectionType
  candidates  Candidate[]
  hidden      Boolean      @default(false)
}

model Candidate {
  name            String
  party           String
  policies        String[]
  website         String?
  electionId      Int?
  photoUrl        String?
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  additionalNotes String?
  city            String?
  linkedin        String?
  email           String?
  phone           String?
  photo           String?
  position        String
  votinglink      String?
  sources         String[]
  verified        Boolean                @default(false)
  state           String?
  donations       Donation[]
  bio             String                 @default("")
  clerkUserId     String?                @unique
  history         String[]
  id              Int                    @id @default(autoincrement())
  status          SubmissionStatus       @default(PENDING)
  election        Election?              @relation(fields: [electionId], references: [id])
  Testimonial     Testimonial[]
  Vendors         Vendor[]               @relation("CandidateToVendor")
  slug            String                 @unique
  hidden          Boolean                @default(false)
  endorsements    Endorsement[]
  profileViews    CandidateProfileView[]
  donationCount   Int                    @default(0)
}

model Donation {
  id        Int              @id @default(autoincrement())
  amount    Decimal          @db.Decimal(10, 2)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  status    SubmissionStatus @default(PENDING)
  paidAt    DateTime?

  // Donor information
  donorName    String
  donorEmail   String
  donorAddress String
  donorCity    String
  donorState   String
  donorZip     String
  donorPhone   String?
  clerkUserId  String?

  // Employment information
  isRetiredOrUnemployed Boolean @default(false)
  occupation            String?
  employer              String?

  // Transaction details
  transactionId String?  @unique
  processingFee Decimal? @db.Decimal(10, 2)
  coverFee      Boolean  @default(false)

  // Relation to Candidate
  candidateId Int
  candidate   Candidate @relation(fields: [candidateId], references: [id])
}

model UserValidationRequest {
  id             Int              @id @default(autoincrement())
  fullName       String
  email          String
  phone          String?
  position       String
  website        String?
  linkedin       String?
  twitter        String?
  additionalInfo String?
  city           String?
  state          String?
  status         SubmissionStatus @default(PENDING)
  candidateId    Int
  clerkUserId    String           @unique
  electionId     Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model ElectionSubmission {
  id          Int              @id @default(autoincrement())
  position    String
  date        DateTime
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  city        String
  state       String
  description String
  positions   Int
  type        ElectionType
  status      SubmissionStatus @default(PENDING)
  clerkUserId String?
  notes       String?
}

model CandidateSubmission {
  id              Int              @id @default(autoincrement())
  name            String
  party           String
  policies        String[]
  website         String?
  electionId      Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  additionalNotes String?
  city            String
  linkedin        String?
  photo           String?
  position        String
  state           String
  bio             String
  clerkUserId     String?
  status          SubmissionStatus @default(PENDING)
  notes           String?
}

model Vendor {
  id                Int               @id @default(autoincrement())
  name              String
  bio               String
  website           String?
  email             String
  phone             String?
  city              String
  state             String
  latitude          Float?
  longitude         Float?
  verified          Boolean           @default(false)
  slug              String            @unique
  photoUrl          String?
  subscription      VendorTier        @default(FREE)
  clerkUserId       String            @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  status            SubmissionStatus  @default(PENDING)
  portfolio         PortfolioItem[]
  testimonials      Testimonial[]
  candidate         Candidate[]       @relation("CandidateToVendor")
  serviceCategories ServiceCategory[] @relation("VendorServices")
  hidden            Boolean           @default(false)
}

model ServiceCategory {
  id          Int                 @id @default(autoincrement())
  name        String              @unique
  type        ServiceCategoryType @unique
  description String?
  vendors     Vendor[]            @relation("VendorServices")
}

model PortfolioItem {
  id          Int     @id @default(autoincrement())
  vendorId    Int
  title       String
  imageUrl    String
  description String?
  vendor      Vendor  @relation(fields: [vendorId], references: [id])
}

model Testimonial {
  id          Int       @id @default(autoincrement())
  vendorId    Int
  candidateId Int
  content     String
  rating      Int
  createdAt   DateTime  @default(now())
  candidate   Candidate @relation(fields: [candidateId], references: [id])
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
}

model CandidateProfileView {
  id          Int      @id @default(autoincrement())
  candidateId Int
  viewedAt    DateTime @default(now())
  viewerIp    String? // Optional: the viewer's IP address
  userAgent   String? // Optional: user agent string from the viewer's browser
  referrerUrl String? // Optional: URL referrer if available

  // Establish relation to the Candidate model
  Candidate Candidate @relation(fields: [candidateId], references: [id])
}

model Endorsement {
  id                      Int       @id @default(autoincrement())
  candidate               Candidate @relation(fields: [candidateId], references: [id])
  candidateId             Int
  endorserName            String
  relationshipDescription String? // description of the relationship between the endorser and the candidate
  clerkUserId             String // Clerk user ID of the signed-in endorser
  content                 String
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

enum ElectionType {
  LOCAL
  STATE
  NATIONAL
  UNIVERSITY
}

enum VendorTier {
  FREE
  STANDARD
  PREMIUM
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ServiceCategoryType {
  CREATIVE_BRANDING
  DIGITAL_TECH
  PHYSICAL_MEDIA
  CONSULTING_PR
  OTHER
}
